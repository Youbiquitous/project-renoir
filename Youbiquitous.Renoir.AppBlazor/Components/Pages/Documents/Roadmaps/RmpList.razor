@using Youbiquitous.Renoir.DomainModel.Management
@using Youbiquitous.Renoir.Resources
@using Youbiquitous.Renoir.DomainModel.Documents
@using Youbiquitous.Martlet.Core.Extensions
@using Youbiquitous.Renoir.AppBlazor.Common.BlazorBootstrapExtensions
@inject NavigationManager NavManager

<!-- List documents -->
<table class="table table-sm table-hover mt-4">
    <thead>
    <tr class="text-uppercase">
        <th class="col-button"></th>
        <th>@AppStrings.Label_Version</th>
        <th>@AppStrings.Label_Date</th>
        <th>@AppStrings.Label_Notes</th>
    </tr>
    </thead>
    <tbody class="pointer-cursor">
    @foreach (var d in Documents)
    {
        <tr @onclick="() => Open(d)">
            <td style="width: 120px;">
                <button class="btn btn-sm btn-danger"
                        @onclick="() => Delete(d)"
                        @onclick:stopPropagation="true">
                    <span class="fa fa-fw fa-times"></span>
                </button>

                <button class="btn btn-sm btn-primary ms-2"
                        @onclick="() => Edit(d)"
                        @onclick:stopPropagation="true">
                    <span class="fa fa-fw fa-edit"></span>
                </button>
            </td>
            <td style="width: 120px;">@d.Version</td>
            <td style="width: 160px;">@d.ReleaseDate.ToString("d MMM yyyy")</td>
            <td>
                <div class="italic text-xs">
                    @d.Notes
                </div>
            </td>
        </tr>
    }
    </tbody>
</table>


<HtmlConfirmDialog @ref="Confirmation" />

@code
{
    /// <summary>
    /// Current list of documents
    /// </summary>
    [Parameter]
    public IEnumerable<Roadmap> Documents { get; set; }

    [Parameter]
    public EventCallback<Roadmap> DocumentDeleted { get; set; }

    [Parameter]
    public EventCallback<Roadmap> DocumentEdited { get; set; }

    /// <summary>
    /// Reference to the Confirm modal dialog
    /// </summary>
    private HtmlConfirmDialog Confirmation { get; set; }

    /// <summary>
    /// Used to trigger the UserDeleted custom event
    /// </summary>
    /// <param name="rmp"></param>
    private async Task Delete(Roadmap rmp)
    {
        if (!DocumentDeleted.HasDelegate)
            return;

        // Ask confirmation
        var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
        var shouldProceed = await Confirmation.ShowAsync(
            title: $"{AppStrings.Label_Deleting} <span class='text-primary'>[{rmp.Version}]</span>",
            message1: AppMessages.Prompt_ConfirmAction,
            confirmDialogOptions: options);

        if (shouldProceed)
            await DocumentDeleted.InvokeAsync(rmp);
    }

    /// <summary>
    /// Edits the details of the document (version and comment)
    /// </summary>
    /// <param name="rmp"></param>
    private void Edit(Roadmap rmp)
    {
        if (!DocumentEdited.HasDelegate)
            return;
        DocumentEdited.InvokeAsync(rmp);
    }

    /// <summary>
    /// Opens the edit page of the roadmap documentm
    /// </summary>
    /// <param name="rmp"></param>
    private void Open(Roadmap rmp)
    {
        NavManager.NavigateTo($"/roadmaps?rmid={rmp.RefId}", forceLoad: true);
    }
}
